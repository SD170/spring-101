<!-- demo.jee/WEB-INF/web.xml -->
<web-app xmlns="http://java.sun.com/xml/ns/demo.jee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/demo.jee http://java.sun.com/xml/ns/demo.jee/web-app_3_0.xsd"
	version="3.0">
	<!-- the version of the web-app is 3.0 -->

	<!-- given a display name for the project -->
	<display-name>To do List</display-name>

	<!-- this means, when someone hits 8080, it'll redirect it to the page 8080/login.do 
		holds. It's just a redirection. -->
	<welcome-file-list>
	<!-- 
		welcome file for javaEE webapp
		
		<welcome-file>login.do</welcome-file>
		
		changed to spring mvc welcome file.
	 -->
		<welcome-file>spring-mvc/login</welcome-file>
	</welcome-file-list>


	<!-- 
		step 1: adding the spring-mvc dependency in pom.xml
		step 2: of adding the configuration location of the  dispatcher servlet 
		to the web.xml file. All the request from the spring-mvc webapp, initially comes to the 
		dispatcher servlet, and then gets redirected.
		step 3: see ./todo-servlet.xml
		
		
		this redirect happens two ways:
		1) the class having the doGet, doPost methods have an annotation @conteoller
		2) add those class paths to the dispatcher servlet below
		
		the second one is better
	 -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- 
				this is the location of the configuration for the Spring Application Context
				of the dispatcher servlet.
				
				basically the /WEB-INF/todo-servlet.xml file allows spring to get hold of all
				the beans by doing component scan.
			 -->
			<param-value>/WEB-INF/todo-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<!-- 
		all the requests starting with the url pattern /spring-mvc/*
		will go to the dispatcher servlet, managed by spring.
		and then gets redirected accordingly.
		
		all the path which uses spring-mvc starts with /spring-mvc/
	 -->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/spring-mvc/*</url-pattern>
	</servlet-mapping>


</web-app>